#!/bin/sh
#
#   "SystemImager"
#
#   $Id$
#    vi: set filetype=sh et ts=4:
#
#   Copyright (C) 1999-2010 Brian Elliott Finley
#
#   28.07.2005 Erich Focht : SCSI device detection and generation of
#                            /sysroot/etc/systemconfig/hardware.lst
#
#   David N. Lombard : Disks enumeration and disk editing
#
##VERSION_INFO##
# Using the following command:
##SI_CREATE_AUTOINSTALL_SCRIPT_CMD##

# Load functions and variables left behind by the dracut logic scripts.
# autoinstall-lib loads systemimager-lib which loads /tmp/variables.txt.
# autoinstall-lib hosts funtions needed for imaging
# systemimager-lib hosts function needed for dracut logic (they are also usefull here)
# /tmp/variables.txt hosts all relevant variables we need to keep track.
. /lib/autoinstall-lib.sh

# Uncomment the following line if you want system messages in GUI as well
# sis_enable_system_msg

##NO_LISTING##
if [ -z $NO_LISTING ]; then
    VERBOSE_OPT="v"
else
    VERBOSE_OPT=""
fi

##SET_IMAGENAME##
##SET_OVERRIDES##

# Check to be sure this not run from a working machine
fail_if_run_from_working_machine

################################################################################
#
#   Lay the image down on the freshly formatted disk(s)
#
#start_report_task
# OL: Obsolete, need to be removed once moved to correct systemimager-xmit-<protocol>.sh plugin.

if [ ! -z "$FLAMETHROWER_DIRECTORY_PORTBASE" ]; then 

    # Use multicast 
    MODULE_NAME="${IMAGENAME}"
    DIR=/sysroot
    RETRY=7
    FLAMETHROWER_TARPIPE=y
    flamethrower_client
    stop_report_task 101 # 101: status=finalizing...
elif [ "x$BITTORRENT" = "xy" ]; then
    # Use BitTorrent
    if [ -f "${TORRENTS_DIR}/image-${IMAGENAME}.tar.gz.torrent" ]; then
        bittorrent_tarball="image-${IMAGENAME}.tar.gz"
        compress='z'
    elif [ -f "${TORRENTS_DIR}/image-${IMAGENAME}.tar.torrent" ]; then
        bittorrent_tarball="image-${IMAGENAME}.tar"
        compress=''
    else
        shellout "error: cannot find a valid torrent file for the image ${IMAGENAME}"
    fi
    # Evaluate the staging directory
    if [ -z "$BITTORRENT_STAGING" ]; then
        loginfo bittorrent_autodetect_staging_dir
        BITTORRENT_STAGING=`bittorrent_autodetect_staging_dir ${TORRENTS_DIR}/${bittorrent_tarball}.torrent`
        if [ -z $BITTORRENT_STAGING ]; then
            logerror ""
            logerror "Cannot find a staging directory to save file: $bittorrent_tarball"
            logerror "Try to increase the size of a partition (like /tmp) in your patitioning schema"
            logerror "to fit the image into a staging directory."
            shellout ""
        fi
        loginfo "--> staging in: $BITTORRENT_STAGING"
    fi
    # Download image from peers
    loginfo "Start downloading image using torrent ${bittorrent_tarball}.torrent"
    loginfo "--> INFO: remember to start /etc/init.d/systemimager-server-bittorrent on the image server!"
    bittorrent_get_file ${TORRENTS_DIR}/${bittorrent_tarball}.torrent ${BITTORRENT_STAGING}
    stop_report_task 101 # 101: status=finalizing...
    # Extract image.
    logaction "Extracting image from ${bittorrent_tarball} ..."
    (cd /sysroot/ && tar -x${VERBOSE_OPT}${compress}Spf ${BITTORRENT_STAGING}/${bittorrent_tarball} > /dev/console) || shellout "Failed to extract image from bittorrent tarball."

    # Stop BitTorrent client.
    bittorrent_stop
    rm -f ${BITTORRENT_STAGING}/${bittorrent_tarball}
    unset bittorrent_tarball
else 
    # Use rsync 
    if [ $NO_LISTING ]; then
        loginfo "Quietly installing image... "
    fi
    if [ "${TMPFS_STAGING}" = "yes" ]; then 

        # Deposit image into tmpfs
        DIR=/tmp/tmpfs_staging
        loginfo "TMPFS_STAGING=${TMPFS_STAGING} -- Staging in ${DIR}"
        mkdir -p ${DIR}

        loginfo "rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --numeric-ids ${IMAGESERVER}::${IMAGENAME}/ ${DIR}/" 
        rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids \
              ${IMAGESERVER}::${IMAGENAME}/ ${DIR}/ > /dev/null 2>&1 || shellout "Image download to staging dir failed!"

        stop_report_task 101 # 101: status=finalizing...

        # Move from staging in tmpfs to disk
        logaction "rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --numeric-ids ${DIR}/ /sysroot/"
        rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --numeric-ids ${DIR}/ /sysroot/ > /dev/null 2>&1 || shellout "Move from staging dir to disk failed"
    else
        logaction "rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids ${IMAGESERVER}::${IMAGENAME}/ /sysroot/" 
        rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids ${IMAGESERVER}::${IMAGENAME}/ /sysroot/ > /dev/null 2>&1 || shellout "Failed to deploy image using rsync!"
        stop_report_task 101 # 101: status=finalizing...
    fi
fi 

beep

#
################################################################################


# Leave notice of which image is installed on the client
echo $IMAGENAME > /sysroot/etc/systemimager/IMAGE_LAST_SYNCED_TO || shellout

### BEGIN generate new fstab file from autoinstallscript.conf ###
##GENERATE_FSTAB##
### END generate new fstab file from autoinstallscript.conf ###

################################################################################
#
#   Process override directories
#
for OVERRIDE in $OVERRIDES
do
    if [ ! -z $FLAMETHROWER_DIRECTORY_PORTBASE ]; then
        # Use multicast
        MODULE_NAME="override_${OVERRIDE}"
        DIR=/sysroot
        RETRY=7
        FLAMETHROWER_TARPIPE=y
        flamethrower_client
    elif [ "x$BITTORRENT" = "xy" ]; then
        # Use BitTorrent
        if [ -f "${TORRENTS_DIR}/override-${OVERRIDE}.tar.gz.torrent" ]; then
            bittorrent_tarball="override-${OVERRIDE}.tar.gz"
            compress='z'
        elif [ -f "${TORRENTS_DIR}/override-${OVERRIDE}.tar.torrent" ]; then
            bittorrent_tarball="override-${OVERRIDE}.tar"
            compress=''
        else
            bittorrent_tarball=""
            logwarn "Cannot find a valid torrent file for override ${OVERRIDE}"
        fi
        # Evaluate the staging directory
        if [ ! -z $bittorrent_tarball ] && [ -z $BITTORRENT_STAGING ]; then
            loginfo bittorrent_autodetect_staging_dir
            BITTORRENT_STAGING=`bittorrent_autodetect_staging_dir ${TORRENTS_DIR}/${bittorrent_tarball}.torrent`
            if [ -z $BITTORRENT_STAGING ]; then
                logwarn "Cannot find a staging directory to save file: $bittorrent_tarball"
                bittorrent_tarball=""
            fi
            loginfo "--> staging in: $BITTORRENT_STAGING"
        fi
        if [ ! -z $bittorrent_tarball ]; then
            # Start downloading
            loginfo "Start downloading override using torrent ${bittorrent_tarball}.torrent"
            loginfo "--> INFO: remember to start /etc/init.d/systemimager-server-bittorrent on the image server!"
            # Download override from peers
            bittorrent_get_file ${TORRENTS_DIR}/${bittorrent_tarball}.torrent ${BITTORRENT_STAGING}
            # Extract override.
            logaction "Extracting override from ${bittorrent_tarball} ..."
            (cd /sysroot/ && tar -x${VERBOSE_OPT}${compress}Spf ${BITTORRENT_STAGING}/${bittorrent_tarball} > /dev/console) || shellout "Failed to extract override from ${bittorrent_tarball}."
            # Stop BitTorrent client.
            bittorrent_stop
            rm -f ${BITTORRENT_STAGING}/${bittorrent_tarball}
        else
            # Use rsync
            loginfo "trying to download override ${OVERRIDE} with rsync..."
            loginfo "rsync -aIv --numeric-ids $IMAGESERVER::overrides/$OVERRIDE/ /sysroot/"
            rsync -av --numeric-ids $IMAGESERVER::overrides/$OVERRIDE/ /sysroot/ > /dev/console || logwarn "Override directory $OVERRIDE doesn't seem to exist, but that may be OK."
        fi
        unset bittorrent_tarball
    else
        # Use rsync
        loginfo "rsync -av --numeric-ids $IMAGESERVER::overrides/$OVERRIDE/ /sysroot/"
        rsync -av --numeric-ids $IMAGESERVER::overrides/$OVERRIDE/ /sysroot/ > /dev/console || logwarn "Override directory $OVERRIDE doesn't seem to exist, but that may be OK."
    fi
done

beep

##################################################################
#
# Uncomment the line below to leave your hostname blank.
# Certain distributions use this as an indication to take on the
# hostname provided by a DHCP server.  The default is to have
# SystemConfigurator assign your clients the hostname that
# corresponds to the IP address the use during the install.
# (If you used to use the static_dhcp option, this is your man.)
#
#HOSTNAME=""


################################################################################
#
#XXX use of SystemConfigurator is deprecated
#   Detect scsi hardware and include the device IDs into the hardware.lst
#   file used by systemconfigurator.  Use pci-automod for 2.6 kernels.
#
#   (no longer support 2.4 kernels -BEF-)
#
#[ ! -d /sysroot/etc/systemconfig ] && mkdir -p /sysroot/etc/systemconfig
#if [ -e /tmp/hardware.lst ]; then
#    # use previously generated hardware.lst
#    cat /tmp/hardware.lst >> /sysroot/etc/systemconfig/hardware.lst
#elif [ -d /sys/bus -a -e /lib/modules/`uname -r`/modules.pcimap ]; then
#    # use pci-automod to generate hardware.lst
#    logmsg "Using pci-automod to generate hardware.lst (this may take a long time):"
#    pci-automod --hwlist --class storage --class net --class serial --class bridge > /sysroot/etc/systemconfig/hardware.lst
#    logmsg "done"
#fi
#
################################################################################

################################################################################
#
#XXX use of SystemConfigurator is deprecated
#   System Configurator
#
# Configure the client's hardware, network interface, and boot loader.
#

#XXX Even without SystemConfigurator, is this bit needed for boot loader
#install perhaps?
# Create an /etc/mtab file with appropriate entries
#cat /etc/mtab | grep -v '/dev/ram' | grep -v -E '^\/dev\s+\/sysroot\/dev\s' | sed 's,/sysroot/*,/,g' | sort -u > /sysroot/etc/mtab

## Save original boot-loader configurations before running systemconfigurator
#for file in /sysroot/boot/grub/menu.lst /sysroot/etc/lilo.conf /sysroot/etc/grub.conf; do
#    if [ -e ${file} ]; then
#        if [ ! -e ${file}.pre-systemimager ]; then
#            cp -f ${file} ${file}.pre-systemimager
#        fi
#    fi
#done

##SYSTEMCONFIGURATOR_PRE##

################################################################################
# BEGIN disk edits
#
[ -z $DISKORDER ] || {
  loginfo "Editing files for actual disk configuration..."
##SHOW_DISK_EDITS##
  for file in /etc/fstab /etc/systemconfig/systemconfig.conf /boot/grub/menu.lst /etc/lilo.conf /etc/grub.conf /boot/grub/device.map; do
    [ -f /sysroot/$file ] || continue
    loginfo " $file"
    cp /sysroot/$file /sysroot/$file.image
##EDIT_DISK_NAMES##
  done
  beep
}
#
# END disk edits
################################################################################

#export PATH=/usr/local/sbin:/usr/local/bin:$PATH
#logmsg "Detecting systemconfigurator:"
#logmsg "---"
#chroot /sysroot/ systemconfigurator --version || \
#    logmsg "WARNING: systemconfigurator was not found in the image $IMAGENAME"
#logmsg "---"

##SYSTEMCONFIGURATOR_POST##

#
################################################################################


##POSTINSTALL##
